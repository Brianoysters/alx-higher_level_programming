def matrix_divided(matrix, div):
   - This line defines a function named matrix_divided that takes two parameters: matrix and div.

     if not all(isinstance(row, list) and all(isinstance(elem, (int, float)) for elem in row) for row in matrix):
   - Checks if all elements in the matrix are lists and all elements inside those lists are integers or floats.
   - Raises a TypeError with a specific message if the condition is not met.

         raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
   - Raises a TypeError with a custom message if the condition in line 2 is not met.

     if any(len(row) != len(matrix[0]) for row in matrix[1:]):
   - Checks if each row in the matrix has the same size as the first row.
   - Raises a TypeError with a specific message if the condition is not met.

         raise TypeError("Each row of the matrix must have the same size")
   - Raises a TypeError with a custom message if the condition in line 4 is not met.

     if not isinstance(div, (int, float)):
   - Checks if the div parameter is a number (integer or float).
   - Raises a TypeError with a specific message if the condition is not met.

         raise TypeError("div must be a number")
   - Raises a TypeError with a custom message if the condition in line 6 is not met.

     if div == 0:
   - Checks if div is equal to zero.

         raise ZeroDivisionError("division by zero")
   - Raises a ZeroDivisionError with a custom message if the condition in line 8 is met
